{
  "name": "Negotiation",
  "tagline": "Content Negotiation tools for PHP.",
  "body": "Negotiation\r\n===========\r\n\r\n[![Build\r\nStatus](https://travis-ci.org/willdurand/Negotiation.png?branch=master)](http://travis-ci.org/willdurand/Negotiation)\r\n[![Build\r\nstatus](https://ci.appveyor.com/api/projects/status/6tbe8j3gofdlfm4v?svg=true)](https://ci.appveyor.com/project/willdurand/negotiation)\r\n[![Total\r\nDownloads](https://poser.pugx.org/willdurand/Negotiation/downloads.png)](https://packagist.org/packages/willdurand/Negotiation)\r\n[![Latest Stable\r\nVersion](https://poser.pugx.org/willdurand/Negotiation/v/stable.png)](https://packagist.org/packages/willdurand/Negotiation)\r\n![PHP 7 ready](https://img.shields.io/badge/PHP%207-ready-green.svg)\r\n\r\n**Negotiation** is a standalone library without any dependencies that allows you\r\nto implement [content\r\nnegotiation](https://tools.ietf.org/html/rfc7231#section-5.3) in your\r\napplication, whatever framework you use.  This library is based on [RFC\r\n7231](https://tools.ietf.org/html/rfc7231). Negotiation is easy to use, and\r\nextensively unit tested!\r\n\r\n> **Important:** You are browsing the documentation of Negotiation **2.x**.\r\nDocumentation for version **1.x** is available here: [Negotiation 1.x\r\ndocumentation](https://github.com/willdurand/Negotiation/blob/1.x/README.md#usage).\r\nYou might also be interested in this: [**What's new in Negotiation 2?**](https://github.com/willdurand/Negotiation/releases/tag/v2.0.0-alpha1)\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nThe recommended way to install Negotiation is through\r\n[Composer](http://getcomposer.org/):\r\n\r\n```bash\r\n$ composer require willdurand/negotiation\r\n```\r\n\r\n\r\nUsage Examples\r\n--------------\r\n\r\n### Media Type Negotiation\r\n\r\n``` php\r\n$negotiator = new \\Negotiation\\Negotiator();\r\n\r\n$acceptHeader = 'text/html, application/xhtml+xml, application/xml;q=0.9, */*;q=0.8';\r\n$priorities   = array('text/html; charset=UTF-8', 'application/json', 'application/xml;q=0.5');\r\n\r\n$mediaType = $negotiator->getBest($acceptHeader, $priorities);\r\n\r\n$value = $mediaType->getValue();\r\n// $value == 'text/html; charset=UTF-8'\r\n```\r\n\r\nThe `Negotiator` returns an instance of `Accept`, or `null` if negotiating the\r\nbest media type has failed.\r\n\r\n### Language Negotiation\r\n\r\n``` php\r\n<?php\r\n\r\n$negotiator = new \\Negotiation\\LanguageNegotiator();\r\n\r\n$acceptLangageHeader = 'en; q=0.1, fr; q=0.4, fu; q=0.9, de; q=0.2';\r\n$priorities          = array('de', 'fu', 'en');\r\n\r\n$bestLanguage = $negotiator->getBest($acceptLangageHeader, $priorities);\r\n\r\n$type = $bestLanguage->getType();\r\n// $type == 'fu';\r\n\r\n$quality = $bestLanguage->getQuality();\r\n// $quality == 0.9\r\n```\r\n\r\nThe `LanguageNegotiator` returns an instance of `AcceptLanguage`.\r\n\r\n### Encoding Negotiation\r\n\r\n``` php\r\n<?php\r\n\r\n$negotiator = new \\Negotiation\\EncodingNegotiator();\r\n$encoding   = $negotiator->getBest($acceptHeader, $priorities);\r\n```\r\n\r\nThe `EncodingNegotiator` returns an instance of `AcceptEncoding`.\r\n\r\n### Charset Negotiation\r\n\r\n``` php\r\n<?php\r\n\r\n$negotiator = new \\Negotiation\\CharsetNegotiator();\r\n\r\n$acceptCharsetHeader = 'ISO-8859-1, UTF-8; q=0.9';\r\n$priorities          = array('iso-8859-1;q=0.3', 'utf-8;q=0.9', 'utf-16;q=1.0');  \r\n\r\n$bestCharset = $negotiator->getBest($acceptCharsetHeader, $priorities);\r\n\r\n$type = $bestCharset->getType();\r\n// $type == 'utf-8';\r\n\r\n$quality = $bestCharset->getQuality();\r\n// $quality == 0.81\r\n```\r\n\r\nThe `CharsetNegotiator` returns an instance of `AcceptCharset`.\r\n\r\n### `Accept*` Classes\r\n\r\n`Accept` and `Accept*` classes share common methods such as:\r\n\r\n* `getValue()` returns the accept value (e.g. `text/html; z=y; a=b; c=d`)\r\n* `getNormalizedValue()` returns the value with parameters sorted (e.g.\r\n  `text/html; a=b; c=d; z=y`)\r\n* `getQuality()` returns the quality if available (`q` parameter)\r\n* `getType()` returns the accept type (e.g. `text/html`)\r\n* `getParameters()` returns the set of parameters (excluding the `q` parameter\r\n  if provided)\r\n* `getParameter()` allows to retrieve a given parameter by its name. Fallback to\r\n  a `$default` (nullable) value otherwise.\r\n* `hasParameter()` indicates whether a parameter exists.\r\n\r\n\r\nUnit Tests\r\n----------\r\n\r\nSetup the test suite using Composer:\r\n\r\n    $ composer install --dev\r\n\r\nRun it using PHPUnit:\r\n\r\n    $ phpunit\r\n\r\n\r\nContributing\r\n------------\r\n\r\nSee [CONTRIBUTING](CONTRIBUTING.md) file.\r\n\r\n\r\nCredits\r\n-------\r\n\r\n* Some parts of this library are inspired by:\r\n\r\n    * [Symfony](http://github.com/symfony/symfony) framework;\r\n    * [FOSRest](http://github.com/FriendsOfSymfony/FOSRest);\r\n    * [PEAR HTTP2](https://github.com/pear/HTTP2).\r\n\r\n* William Durand <will+git@drnd.me>\r\n* [@neural-wetware](https://github.com/neural-wetware)\r\n\r\n\r\nLicense\r\n-------\r\n\r\nNegotiation is released under the MIT License. See the bundled LICENSE file for\r\ndetails.\r\n",
  "google": "UA-28365039-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}